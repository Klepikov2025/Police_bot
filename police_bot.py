import asyncio
import logging
import os
import sqlite3
from datetime import datetime, timedelta

import nest_asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import ChatJoinRequest, ChatMemberUpdated

nest_asyncio.apply()  # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è event loops

##############################################
# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
##############################################
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

##############################################
# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞
##############################################
API_TOKEN = os.getenv("BOT_TOKEN")
if not API_TOKEN:
    logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –±–æ—Ç–∞! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN.")
    exit(1)

##############################################
# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö SQLite
##############################################
# –§–∞–π–ª –±–∞–∑—ã –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –≤ —Ä–∞–±–æ—á–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ (bot.db)
conn = sqlite3.connect('bot.db', check_same_thread=False)
cursor = conn.cursor()

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü (–µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç)
cursor.execute('''
CREATE TABLE IF NOT EXISTS groups (
    group_id INTEGER PRIMARY KEY,
    city TEXT,
    region_code INTEGER,
    is_old_group BOOLEAN DEFAULT 0,
    network TEXT
)
''')

cursor.execute('''
CREATE TABLE IF NOT EXISTS requests (
    user_id INTEGER,
    group_id INTEGER,
    timestamp DATETIME DEFAULT CURRENT_TIMESTAMP,
    PRIMARY KEY (user_id, group_id)
)
''')

cursor.execute('''
CREATE TABLE IF NOT EXISTS member_logs (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER,
    group_id INTEGER,
    event_type TEXT,
    timestamp DATETIME DEFAULT CURRENT_TIMESTAMP
)
''')

cursor.execute('''
CREATE TABLE IF NOT EXISTS user_interactions (
    user_id INTEGER PRIMARY KEY,
    first_interaction DATETIME
)
''')
conn.commit()

# –ï—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ groups –ø—É—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω—è–µ–º –µ—ë –¥–∞–Ω–Ω—ã–º–∏
cursor.execute("SELECT COUNT(*) FROM groups")
if cursor.fetchone()[0] == 0:
    ns_groups = [
        (-1001465465654, '–ö—É—Ä–≥–∞–Ω', 45, 1, 'NS'),
        (-1001824149334, '–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫', 54, 1, 'NS'),
        (-1002233108474, '–ß–µ–ª—è–±–∏–Ω—Å–∫', 74, 1, 'NS'),
        (-1001753881279, '–ü–µ—Ä–º—å', 59, 1, 'NS'),
        (-1001823390636, '–£—Ñ–∞', 2, 1, 'NS'),
        (-1002145851794, '–Ø–º–∞–ª', 89, 1, 'NS'),
        (-1001938448310, '–ú–æ—Å–∫–≤–∞', 77, 1, 'NS'),
        (-1001442597049, '–•–ú–ê–û', 86, 1, 'NS'),
        (-1001475923869, '–°–µ–∫—Å –ß–∞—Ç 72', 72, 1, 'NS'),
        (-1002114646372, '–ß–∞—Ç –ù–° 86', 86, 1, 'NS'),
        (-1001709856174, '–ß–∞—Ç –ù–° 59', 59, 1, 'NS'),
        (-1001550223843, '–ß–∞—Ç –ù–° 74', 74, 1, 'NS'),
        (-1002154524569, '–ß–∞—Ç –ù–° 66', 66, 1, 'NS'),
        (-1001265993934, '–ß–∞—Ç –ù–° 72', 72, 1, 'NS'),
        (-1001841617225, '–ß–∞—Ç –ù–° 16', 16, 1, 'NS'),
        (-1002137199355, '–ß–∞—Ç –ù–° 89', 89, 1, 'NS'),
        (-1002072150944, '–ß–∞—Ç –ù–° 54', 54, 1, 'NS'),
        (-1002200049020, '–ß–∞—Ç –ù–° 78', 78, 1, 'NS'),
        (-1001746554744, '–ß–∞—Ç –ù–° 55', 55, 1, 'NS'),
        (-1002193127380, '–ß–µ–ª—è–±–∏–Ω—Å–∫', 74, 1, 'NS'),
        (-1002169473861, '–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥', 66, 1, 'NS')
    ]
    parni_groups = [
        (-1002413948841, '–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥', 66, 0, 'PARNI'),
        (-1002255622479, '–¢—é–º–µ–Ω—å', 72, 0, 'PARNI'),
        (-1002274367832, '–û–º—Å–∫', 55, 0, 'PARNI'),
        (-1002406302365, '–ß–µ–ª—è–±–∏–Ω—Å–∫', 74, 0, 'PARNI'),
        (-1002280860973, '–ü–µ—Ä–º—å', 59, 0, 'PARNI'),
        (-1002469285352, '–ö—É—Ä–≥–∞–Ω', 45, 0, 'PARNI'),
        (-1002287709568, '–•–ú–ê–û', 86, 0, 'PARNI'),
        (-1002448909000, '–£—Ñ–∞', 2, 0, 'PARNI'),
        (-1002261777025, '–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫', 54, 0, 'PARNI'),
        (-1002371438340, '–Ø–ú–ê–û', 89, 0, 'PARNI')
    ]
    mk_groups = [
        (-1001219669239, 'ü•∑ –ú–ö | –ë–µ–∑ –ø—Ä–µ–¥—Ä–∞—Å—Å—É–¥–∫–æ–≤ 18+', 0, 0, 'MK'),
        (-1001814693664, 'ü•∑ –ú–ö | –Æ–≥', 0, 0, 'MK'),
        (-1002210043742, 'ü•∑ –ú–ö | –ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥', 0, 0, 'MK'),
        (-1002205127231, 'ü•∑ –ú–ö | –ü–µ—Ä–º—å', 0, 0, 'MK'),
        (-1002228881675, 'ü•∑ –ú–ö | –ö–∞–∑–∞–Ω—å', 0, 0, 'MK'),
        (-1002208434096, 'ü•∑ –ú–ö | –ú–æ—Å–∫–≤–∞', 0, 0, 'MK'),
        (-1001604781452, 'ü•∑ –ú–ö | –ò–∂–µ–≤—Å–∫', 0, 0, 'MK'),
        (-1001852671383, 'ü•∑ –ú–ö | –°–∞–º–∞—Ä–∞', 0, 0, 'MK'),
        (-1001631628911, 'ü•∑ –ú–ö | –ù–∏–∂–Ω–∏–π –ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫', 0, 0, 'MK'),
        (-1002151258573, 'ü•∑ –ú–ö | –û–º—Å–∫', 0, 0, 'MK'),
        (-1002248474008, 'ü•∑ –ú–ö | –ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫', 0, 0, 'MK'),
        (-1002207503508, 'ü•∑ –ú–ö | –í–æ—Ä–æ–Ω–µ–∂', 0, 0, 'MK'),
        (-1002167762598, 'ü•∑ –ú–ö | –í–æ–ª–≥–æ–≥—Ä–∞–¥', 0, 0, 'MK'),
        (-1002161346845, 'ü•∑ –ú–ö | –î–∞–ª—å–Ω–∏–π –í–æ—Å—Ç–æ–∫', 0, 0, 'MK'),
        (-1002235645677, 'ü•∑ –ú–ö | –ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫', 0, 0, 'MK'),
        (-1002210623988, 'ü•∑ –ú–ö | –¢—é–º–µ–Ω—å, –•–ú–ê–û –∏ –Ø–ù–ê–û', 0, 0, 'MK'),
        (-1002217056197, 'ü•∑ –ú–ö | –ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥', 0, 0, 'MK'),
        (-1002210419274, 'ü•∑ –ú–ö | –ò—Ä–∫—É—Ç—Å–∫', 0, 0, 'MK'),
        (-1002147522863, 'ü•∑ –ú–ö | –ö–µ–º–µ—Ä–æ–≤–æ', 0, 0, 'MK'),
        (-1002169723426, 'ü•∑ –ú–ö | –ú—É–∂—Å–∫–æ–π —á–∞—Ç', 0, 0, 'MK'),
        (-1002196469365, 'ü•∑ –ú–ö | –£—Ñ–∞', 0, 0, 'MK'),
        (-1002236337328, 'ü•∑ –ú–ö | –°–µ–∫—Å-—Ç—É—Ä–∏–∑–º', 0, 0, 'MK'),
        (-1002234471215, 'ü•∑ –ú–ö | –ë–∞—Ä–Ω–∞—É–ª', 0, 0, 'MK'),
        (-1002238514762, 'ü•∑ –ú–ö | –ß–µ–ª—è–±–∏–Ω—Å–∫', 0, 0, 'MK'),
        (-1002217967528, 'ü•∑ –ú–ö | –ì–∞–ª–µ—Ä–µ—è', 0, 0, 'MK'),
        (-1002485776859, 'ü•∑ –ú–ö | –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥', 0, 0, 'MK'),
        (-1002426762134, 'ü•∑ –ú–ö | –°–∞—Ä–∞—Ç–æ–≤', 0, 0, 'MK'),
        (-1002255568202, 'ü•∑ –ú–ö | –û—Ä–µ–Ω–±—É—Ä–≥', 0, 0, 'MK'),
        (-1002197215824, 'ü•∑ –ú–ö | –§–µ—Ç–∏—à–∏', 0, 0, 'MK'),
        (-1002427366211, '–ú–ö | –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω', 0, 0, 'MK'),
        (-1001727060632, '–ì—Ä—É–ø–ø–∞ FAQ', 0, 0, 'MK'),
        (-1001415498051, 'RAINBOW MAN', 0, 0, 'MK'),
    ]
    all_groups = ns_groups + parni_groups + mk_groups
    cursor.executemany(
        "INSERT OR REPLACE INTO groups (group_id, city, region_code, is_old_group, network) VALUES (?, ?, ?, ?, ?)",
        all_groups
    )
    conn.commit()

##############################################
# –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
##############################################
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot=bot)

##############################################
# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
##############################################
async def is_user_in_parni(user_id: int) -> bool:
    cursor.execute("SELECT group_id FROM groups WHERE network = 'PARNI'")
    parni_groups = cursor.fetchall()
    for group in parni_groups:
        try:
            member = await bot.get_chat_member(group[0], user_id)
            if member.status == 'member':
                return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —É—á–∞—Å—Ç–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –≤ –≥—Ä—É–ø–ø–µ {group[0]}: {e}")
    return False

async def is_user_verified_in_ns(user_id: int) -> bool:
    cursor.execute("SELECT group_id FROM groups WHERE network = 'NS'")
    ns_groups = cursor.fetchall()
    for group in ns_groups:
        try:
            member = await bot.get_chat_member(group[0], user_id)
            join_date = getattr(member, 'joined_at', None)
            if member.status == 'member':
                if join_date is None or (datetime.now() - join_date) >= timedelta(days=7):
                    return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —É—á–∞—Å—Ç–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –≤ –≥—Ä—É–ø–ø–µ {group[0]}: {e}")
    return False

async def is_user_verified_in_mk(user_id: int) -> bool:
    cursor.execute("SELECT group_id FROM groups WHERE network = 'MK'")
    mk_groups = cursor.fetchall()
    for group in mk_groups:
        try:
            member = await bot.get_chat_member(group[0], user_id)
            join_date = getattr(member, 'joined_at', None)
            if member.status == 'member':
                if join_date is None or (datetime.now() - join_date) >= timedelta(days=7):
                    return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —É—á–∞—Å—Ç–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –≤ –≥—Ä—É–ø–ø–µ {group[0]}: {e}")
    return False

async def is_user_verified_for_parni(user_id: int) -> bool:
    return (await is_user_verified_in_ns(user_id)) or (await is_user_verified_in_mk(user_id))

##############################################
# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞—è–≤–æ–∫ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ
##############################################
async def process_request(user_id: int, req_group_id: int):
    logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞—è–≤–∫–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –¥–ª—è –≥—Ä—É–ø–ø—ã {req_group_id}")
    cursor.execute("SELECT city, network FROM groups WHERE group_id = ?", (req_group_id,))
    group_info = cursor.fetchone()

    if not group_info:
        logger.info(f"–ì—Ä—É–ø–ø–∞ {req_group_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}.")
        try:
            await bot.decline_chat_join_request(req_group_id, user_id)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –≤ –≥—Ä—É–ø–ø–µ {req_group_id}: {e}")
        return

    group_city, network = group_info
    logger.info(f"–î–∞–Ω–Ω—ã–µ –≥—Ä—É–ø–ø—ã {req_group_id}: –≥–æ—Ä–æ–¥={group_city}, —Å–µ—Ç—å={network}")

    if network in ['NS', 'MK']:
        logger.info(f"–ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –≤ –≥—Ä—É–ø–ø–µ {network} {req_group_id} (–≥—Ä—É–ø–ø–∞ –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏).")
        return
    elif network == 'PARNI':
        if await is_user_in_parni(user_id):
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–∂–µ –≤ –≥—Ä—É–ø–ø–µ PARNI. –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ –¥–ª—è –≥—Ä—É–ø–ø—ã {req_group_id}.")
            try:
                await bot.decline_chat_join_request(req_group_id, user_id)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏ PARNI –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –≤ –≥—Ä—É–ø–ø–µ {req_group_id}: {e}")
            return
        if await is_user_verified_for_parni(user_id):
            try:
                await bot.approve_chat_join_request(req_group_id, user_id)
                cursor.execute("INSERT OR REPLACE INTO requests (user_id, group_id) VALUES (?, ?)", (user_id, req_group_id))
                conn.commit()
                logger.info(f"–ó–∞—è–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –≤ –≥—Ä—É–ø–ø—É PARNI {req_group_id} –æ–¥–æ–±—Ä–µ–Ω–∞.")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏ PARNI –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –≤ –≥—Ä—É–ø–ø–µ {req_group_id}: {e}")
        else:
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –≤ —Å–µ—Ç–∏ NS/MK (–Ω–µ —Å–æ—Å—Ç–æ–∏—Ç –Ω–∏ –≤ –æ–¥–Ω–æ–π –≥—Ä—É–ø–ø–µ NS/MK >=7 –¥–Ω–µ–π). –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ –¥–ª—è –≥—Ä—É–ø–ø—ã {req_group_id}.")
            try:
                await bot.decline_chat_join_request(req_group_id, user_id)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏ PARNI –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –≤ –≥—Ä—É–ø–ø–µ {req_group_id}: {e}")
        return
    else:
        logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–µ—Ç–∏ –¥–ª—è –≥—Ä—É–ø–ø—ã {req_group_id}. –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}.")
        try:
            await bot.decline_chat_join_request(req_group_id, user_id)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –≤ –≥—Ä—É–ø–ø–µ {req_group_id}: {e}")
        return

##############################################
# –ü—Ä–æ—Å–º–æ—Ç—Ä –≤–∏—Å—è—â–∏—Ö –∑–∞—è–≤–æ–∫
##############################################
async def process_pending_requests():
    logger.info("–ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏—Å—è—â–∏—Ö –∑–∞—è–≤–æ–∫...")
    cursor.execute("SELECT group_id FROM groups")
    groups_list = cursor.fetchall()
    for group in groups_list:
        group_id = group[0]
        try:
            join_requests = await bot.get_chat_join_requests(chat_id=group_id, limit=100)
            if not join_requests:
                logger.info(f"–ù–µ—Ç –≤–∏—Å—è—â–∏—Ö –∑–∞—è–≤–æ–∫ –¥–ª—è –≥—Ä—É–ø–ø—ã {group_id}.")
                continue
            logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(join_requests)} –≤–∏—Å—è—â–∏—Ö –∑–∞—è–≤–æ–∫ –¥–ª—è –≥—Ä—É–ø–ø—ã {group_id}.")
            for req in join_requests:
                user_id = req.from_user.id
                logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏—Å—è—â–µ–π –∑–∞—è–≤–∫–∏: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤ –≥—Ä—É–ø–ø–µ {group_id}")
                await process_request(user_id, group_id)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏ –¥–ª—è –≥—Ä—É–ø–ø—ã {group_id}: {e}")
    logger.info("–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏—Å—è—â–∏—Ö –∑–∞—è–≤–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")

##############################################
# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ä—É—á–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏—Å—è—â–∏—Ö –∑–∞—è–≤–æ–∫
##############################################
@dp.message(Command("process_pending"))
async def process_pending_cmd(message: types.Message):
    await process_pending_requests()
    await message.answer("–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏—Å—è—â–∏—Ö –∑–∞—è–≤–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")

##############################################
# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ö–æ–¥–∞/–≤—ã—Ö–æ–¥–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
##############################################
@dp.chat_member()
async def chat_member_update_handler(update: ChatMemberUpdated):
    user_id = update.from_user.id
    group_id = update.chat.id
    old_status = update.old_chat_member.status
    new_status = update.new_chat_member.status
    event = None
    if old_status != "member" and new_status == "member":
        event = "join"
    elif old_status == "member" and new_status != "member":
        event = "leave"
    if event:
        cursor.execute("INSERT INTO member_logs (user_id, group_id, event_type) VALUES (?, ?, ?)",
                       (user_id, group_id, event))
        conn.commit()
        logger.info(f"–õ–æ–≥: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} {event} –≥—Ä—É–ø–ø—É {group_id}")

##############################################
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞—è–≤–æ–∫ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ
##############################################
@dp.chat_join_request()
async def handle_join_request(request: ChatJoinRequest):
    user_id = request.from_user.id
    req_group_id = request.chat.id
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∑–∞—è–≤–∫–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –¥–ª—è –≥—Ä—É–ø–ø—ã {req_group_id}.")
    await process_request(user_id, req_group_id)

##############################################
# –û—Å–Ω–æ–≤–Ω–æ–π polling-—Ü–∏–∫–ª –±–æ—Ç–∞
##############################################
async def polling_loop():
    while True:
        try:
            logger.info("–ó–∞–ø—É—Å–∫ polling-—Ü–∏–∫–ª–∞ –±–æ—Ç–∞...")
            await dp.start_polling(bot, skip_updates=True)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞: {e}. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥...")
            try:
                await dp.stop_polling()
            except Exception as inner_e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ polling: {inner_e}")
            await asyncio.sleep(10)

if __name__ == "__main__":
    asyncio.run(polling_loop())
